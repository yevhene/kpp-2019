<section>
  <h1>Основи JavaScript</h1>
  <h2>Лекція 2</h2>
</section>

<section>
  <h2>Дані</h2>

  <section>
    <h3>Число (number)</h3>

    <p>Цілі та дробові числа представлені одним типом. (Але інтерпретатор їх оброблює окремо).</p>

    <i>Приклад: 42, 123.12</i>
  </section>

  <section>
    <h3>Рядок (string)</h3>

    <p>Набір символів, що обмежується одинарними або подвійними лапками. Оскільки подвійні лапки зазвичай використовуються в HTML, заохочується використання одинарних.</p>

    <i>Приклад: 'Hello1', "Word!"</i>
  </section>

  <section>
    <h3>Логічні (boolean)</h3>

    <p>Результати логічних операцій.</p>

    <i>Можуть мати всього два значення: true або false</i>
  </section>
</section>

<section>
  <h2>Вирази (expressions)</h2>

  <section>
    <p>Набір даних та операторів що повертає значення (обраховується та підставляє на своє місце).</p>

    <i>Приклад: 3 + 4 * 5</i>
  </section>
</section>

<section>
  <h2>Оператори</h2>

  <section>
    <h3>Унарні</h3>

    <ul>
      <li><b>Членство</b> - ., []</li>
      <li><b>Виклик / створення</b> -  (), new</li>
      <li><b>Заперечення / інкремент</b> - !, ~, -, +, ++, --, typeof, void, delete</li>
    </ul>
  </section>

  <section>
    <h3>Математичні</h3>

    <ul>
      <li><b>Множення - ділення</b> - *, /, %</li>
      <li><b>Додавання - віднімання</b> -  +, -</li>
      <li><b>Побітовий зсув</b> - &lt;&lt;, &gt;&gt;, &gt;&gt;&gt;</li>
    </ul>
  </section>

  <section>
    <h3>Логічні</h3>

    <ul>
      <li><b>Відносні</b> - &lt;, &lt;=, &gt;, &gt;=, in, instanceof</li>
      <li><b>Порівняння</b> - ==, !=, ===, !==</li>
      <li><b>Побітове І</b> - &amp;</li>
      <li><b>Побітове Виключне Або</b> - ^</li>
      <li><b>Побітове Або</b> - |</li>
      <li><b>Логічне І</b> - &amp;&amp;</li>
      <li><b>Логічне Але</b> - ||</li>
      <li><b>Умовні</b> - ?:</li>
    </ul>
  </section>

  <section>
    <h3>Присвоєння</h3>

    <ul>
      <li><b>Присвоєння</b> - =, +=, -=, *=, /=, %=, &lt;&lt;=, &gt;&gt;=, &gt;&gt;&gt;=, &amp;=, ^=, |=</li>
    </ul>
  </section>

  <section>
    <pre><code class="hljs" data-trim contenteditable>
1 + 2 * 3 &amp;&amp; 4++
    </code></pre>

    <i>обраховується, як</i>

    <pre><code class="hljs" data-trim contenteditable>
(1 + (2 * 3)) &amp;&amp; (4++)
    </code></pre>
  </section>
</section>

<section>
  <h2>Інструкції (statement)</h2>

  <section>
    <p>Один або декілька виразів, що закінчується на `;`.</p>
    <p><i>`;` можна опускати але це може іноді призводити до неочікуванних наслідків</i></p>
  </section>
</section>

<section>
  <h2>Змінні</h2>

  <section>
    <p>Ім'я для місця в пам'яті. Позначається `let`.</p>

    <pre><code class="hljs" data-trim contenteditable>
let a = 4;
    </code></pre>

    <p>Тип даних що міститься в змінній може змінюватись.</p>
  </section>
</section>

<section>
  <h2>Пусті типи даних</h2>

  <section>
    <p>Застосовуються для того щоб позначити відсутність даних.</p>

    <ul>
      <li><b>null</b> - Нуль. Якщо значення визначене але пусте</li>
      <li><b>undefined</b> - Якщо значення не визначене</li>
    </ul>

    <pre><code class="hljs" data-trim contenteditable>
let student = null;
let studentMark = undefined;
    </code></pre>
  </section>
</section>

<section>
  <h2>Коментарі</h2>

  <section>
    <p>Пояснення до коду або код що відмічений, як той що не має виконуватись.</p>

    <ul>
      <li><b>//</b> - Одностроковий коментар. Все що після позначки `//` не виконується</li>
      <li><b>/* ... */</b> - Багатостроковий коментар. Все що між `/*` і `*/` не виконується</li>
    </ul>

    <pre><code class="hljs" data-trim contenteditable>
// Це коментар

/*
 * А це
 *   багатостроковий
 * коментар
 */
    </code></pre>
  </section>
</section>

<section>
  <h2>Масиви</h2>

  <section>
    <p>Упорядкований, пронумерований набір елементів. Елементи нумеруються починаючи з 0. Для доступу до елемента використувується оператор `[]`.</p>

    <pre><code class="hljs" data-trim contenteditable>
let items = [3, true, 'Василь'];

items[2] //=&gt; 'Василь'
    </code></pre>
  </section>
</section>

<section>
  <h2>Приведення типів</h2>

  <section>
    <h3>Type coercion</h3>

    <p>Перетворення одно типу в інший.</p>
  </section>

  <section>
    <h3>Явне (explicit)</h3>

    <pre><code class="hljs" data-trim contenteditable>
let str = '5';
Number(str);
    </code></pre>
  </section>

  <section>
    <h3>Неявне (implicit)</h3>

    <p>Виконується під час застосування бінарних операторів (операторів для двух аргументів). Окрім `===` і `!==`.</p>

    <pre><code class="hljs" data-trim contenteditable>
'2' + '1' //=&gt; '21'
'2' - '1' //=&gt; 1

('1' + 2) + 3 //=&gt; '123'
'1' + (2 + 3) //=&gt; '15'

[1] + 2 //=&gt; '12'
    </code></pre>
  </section>
</section>

<section>
  <h2>Об'єкти</h2>

  <section>
    <p>Набір пар ключ - значення.</p>

    <pre><code class="hljs" data-trim contenteditable>
let student = {
  name: 'Василь',
  group: 'КН'
};

items['name'] //=&gt; 'Василь'
items.group //=&gt; 'КН'
items.group = 'ПІ' //=&gt; 'ПІ'
    </code></pre>
  </section>
</section>

<section>
  <h2>Умови</h2>

  <section>
    <p>Дозволяють виконувати чи не код в залежності від певної умови.</p>
  </section>

  <section>
    <h3>if...else</h3>

    <pre><code class="hljs" data-trim contenteditable>
let x = 0;
let i = 0;

if (x &gt; 0) {
  i++;
} else {
  i--;
}

i; //=&gt; -1
    </code></pre>
  </section>
</section>

<section>
  <h2>Цикли</h2>

  <section>
    <p>Дозволяють виконувати інструкції певну кількість разів. Одине виконання називається - ітерація.</p>
  </section>

  <section>
    <h3>while</h3>

    <p>Виконує блок коду доки умова правдива. Якщо умова одразу неправдива, не виконується жодного разу.</p>

    <pre><code class="hljs" data-trim contenteditable>
let i = 0;

while (i &lt; 5) {
  i++;
}

i; //=&gt; 5
    </code></pre>
  </section>

  <section>
    <h3>do..while</h3>

    <p>Аналогічний до циклу `while` але завжди виконується, як мінімум один раз, навіть якщо умова одразу неправдива.</p>

    <pre><code class="hljs" data-trim contenteditable>
let i = 0;

do {
  i++;
} while(i &lt; 0);

i; //=&gt; 1
    </code></pre>
  </section>

  <section>
    <h3>for</h3>

    <p>Скорочений запис циклу що виконується конкретну кількість разів. Складається з трьох частин `for (ініціалізація; умова; зміна)`.</p>

    <pre><code class="hljs" data-trim contenteditable>
for (let i = 0; i &lt; 5; i++) {
  // ...код...
}
    </code></pre>
  </section>

  <section>
    <h3>Контроль виконання</h3>

    <ul>
      <li><b>break</b> - закінчує виконная циклу</li>
      <li><b>continue</b> - зікінчує виконання поточної ітераціїї, та однару переходить до наступної, якщо умова правдива</li>
    </ul>
  </section>
</section>

<section>
  <h2>Функції</h2>

  <section>
    <p>Об'єднані частини коду</p>

    <pre><code class="hljs" data-trim contenteditable>
function hello() {
  console.log('Привіт!')
}

hello();
//&gt; Привіт!
    </code></pre>
  </section>

  <section>
    <h3>Параметри та аргументи функції</h3>

    <ul>
      <li><b>Параметри</b> - спеціальні змінні через які, у функцію передаються значення</li>
      <li><b>Аргументи</b> - конкретні значення що передаються під час виклику</li>
    </ul>

    <pre><code class="hljs" data-trim contenteditable>
function helloStudent(name, group) {
  let greeting = 'Привіт ' + name + ' з ' + group + '!';
  console.log(greeting);
}

let studentName = 'Василь';

helloStudent(studentName, '2-КН');
//&gt; Привіт Василь з 2-КН!
    </code></pre>
  </section>

  <section>
    <h3>Значення що повертається</h3>

    <p>Значення що підставляється у місце виклику функції.</p>

    <pre><code class="hljs" data-trim contenteditable>
function add(a, b) {
  return a + b;
}

add(3, 4); //=&gt; 5
    </code></pre>
  </section>
</section>

<section>
  <h2>Стандартна бібліотека</h2>

  <section>
    <h3>Вбудовані об'єкти</h3>

    <ul>
      <li>Math</li>
      <li>JSON</li>
      <li>Number</li>
      <li>Array</li>
    </ul>
  </section>

  <section>
    <h3>Вивід</h3>

    <pre><code class="hljs" data-trim contenteditable>
console.log('Hello World');
    </code></pre>
  </section>
</section>

<section>
  <h2>Питання?</h2>
</section>
