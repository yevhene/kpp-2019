<section>
  <h1>React Suspense</h1>

  <small>
    Yevhen Shemet<br />
    github: <a target="_blank" href="https://github.com/yevhene/present-react-suspense">yevhene/present-react-suspense</a>
  </small>
</section>

<section>
  <h2>React</h2>

  <section>
    <h3>Two problems</h3>

    <ul>
      <li>Local Resources</li>
      <li>Network Resources</li>
    </ul>
  </section>

  <section>
    <h3>React 16</h3>
  </section>
</section>

<section>
  <h2>Local Resources</h2>

  <section>
    <h3>Problem: One thread</h3>

    <h4>Solution: AsyncMode</h4>
  </section>
</section>

<section>
  <h2>Network Resources</h2>

  <section>
    <ul>
      <li>Data</li>
      <li>Assets</li>
      <li>Code</li>
    </ul>
  </section>

  <section>
    <h3>React Suspense</h3>

    <h4>Uniform approach</h3>
  </section>

  <section>
    <h2>Demo: suspense</h2>

    <ul>
      <li>Loading cascades</li>
    </ul>
  </section>
</section>

<section>
  <h2>React Suspense</h2>

  <section>
    <h3>This API is so raw ...</h3>

    <img src="images/raw-api.jpg" />
  </section>

  <section>
    <h3>Suspense</h3>

    <pre><code class="javascript" data-trim contenteditable>
const Loading = ({
  fallback = (<div className="spinner"></div>),
  children
}) =&gt; (
  &lt;Suspense fallback={fallback}&gt;
    &lt;Content /&gt;
  &lt;/Suspense&gt;
);
    </code></pre>
  </section>

  <section>
    <h3>How it works?</h3>

    <img src="images/suspense-mechanism.png" />
  </section>

  <section>
    <h3>Let's Implement It</h3>
  </section>

  <section>
    <h3>SlowContent</h3>

    <pre><code class="javascript" data-trim contenteditable>
const cache = { status: false };

function wait(time) {
  if (cache.status) {
    return;
  }
  cache.status = true;

  throw new Promise((resolve) =&gt;
    setTimeout(() =&gt; resolve(), time)
  );
}

function SlowContent(props) {
  wait(1500);
  return <h3>Slow Content</h3>;
}
    </code></pre>
  </section>

  <section>
    <h3>Suspense</h3>

    <pre><code class="javascript" data-trim contenteditable>
class Suspense extends Component {
  state = { isReady: true }

  componentDidCatch(e) {
    if (!(e instanceof Promise)) throw e;

    this.setState(() =&gt; ({ isReady: false }));
    e.then(() =&gt; this.setState(() =&gt; ({ isReady: true })));
  }

  render() {
    if (!this.state.isReady) {
      return this.props.placeholder;
    }
    return this.props.children;
  }
}
    </code></pre>
  </section>

  <section>
    <h2>Demo: poor-mans-suspense</h2>

    <ul>
      <li>It work's</li>
    </ul>
  </section>

  <section>
    <h3>React Implementation</h3>

    <pre><code class="javascript" data-trim contenteditable>
export const REACT_SUSPENSE_TYPE = hasSymbol
  ? Symbol.for('react.suspense')
  : 0xead1;
    </code></pre>

    <p>react/packages/shared/ReactSymbols.js</p>
  </section>
</section>

<section>
  <h2>react-cache</h2>

  <section>
    <h4>Uniform Data/Assets/Code cache</h3>
  </section>

  <section>
    <img src="images/react-cache-disclaimer.png" />
  </section>

  <section>
    <img src="images/what-the-fuck.jpg" />
  </section>

  <section>
    <h3>read</h3>

    <pre><code class="javascript" data-trim contenteditable>
import {
  unstable_createResource as createResource
} from 'react-cache';

export const studentFetcher = createResource(
  (id) =&gt; fetch(`http://localhost:3000/students/${id}`)
);

const student = studentFetcher.read(cache, 1)
    </code></pre>
  </section>

  <section>
    <h3>preload</h3>

    <pre><code class="javascript" data-trim contenteditable>
studentFetcher.preload(cache, 1)

// ...Later...
const student = studentFetcher.read(cache, 1)
    </code></pre>
  </section>

  <section>
    <h2>Demo: suspense</h2>

    <ul>
      <li>Data/Assets/Code loading</li>
    </ul>
  </section>
</section>

<section>
  <h2>Avoid Unnecessary Loading States</h2>

  <section>
    <h2>Demo: suspense</h2>

    <ul>
      <li>Loader deplayMs</li>
    </ul>
  </section>

  <section>
    <h3>delayMs</h3>

    <pre><code class="javascript" data-trim contenteditable>
      &lt;Suspense
        delayMs={1000}
        fallback={&lt;Spinner /&gt;}
      &gt;
        &lt;Content /&gt;
      &lt;/Suspense&gt;
    </code></pre>
  </section>

  <section>
    <ul>
      <li>start rendering before have data</li>
      <li>pause rendering till data is ready</li>
      <li>+ on fast network delay dom mutations until entire tree is complete</li>
      <li>- on slow network control load</li>
    </ul>
  </section>
</section>

<section>
  <h2>Server Side Rendering</h2>

  <section>
    <pre><code class="javascript" data-trim contenteditable>
import { renderToNodeStream } from 'react-dom';

app.get('/', (req, res) =&gt; {
  const stream = renderToNodeStream(&lt;App /&gt;);
  stream.pipe(res);
  stream.on('finish', () =&gt; {
    res.end();
  });
});
    </code></pre>
  </section>
</section>

<section>
  <h2>Questions?</h2>
</section>
